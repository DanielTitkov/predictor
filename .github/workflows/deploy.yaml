name: Deploy
on:
  push:
    tags:
      - v*

jobs:
  # lint code with golangci-lint using built-in action
  lint:
    environment: stage
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45.2
          args: --issues-exit-code=0

  # run tests
  test:
    environment: stage
    name: Test
    runs-on: ubuntu-latest 
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Check out code
        uses: actions/checkout@v2
      - name: Test
        run: make test

  # build go binary, this is actully not really needed, it just validates the code builds
  build:
    environment: stage
    name: Build
    runs-on: ubuntu-latest 
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Check out code
        uses: actions/checkout@v2
      - name: Build
        run: make build

  # build docker and push it to docker registry
  publish:
    environment: stage
    name: Publish
    needs: [lint, build, test]
    runs-on: ubuntu-latest 
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
    steps:
      - name: Login to docker.io
        run:  echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - name: Check out code
        uses: actions/checkout@v2
      - name: Build image
        run: docker build -t $LOGIN/$NAME:${GITHUB_REF:11} -f deployments/docker/Dockerfile .
      - name: Push image to docker.io
        run: docker push $LOGIN/$NAME:${GITHUB_REF:11} 

  # tell server to pull new contaner and run it
  deploy:
    environment: stage
    name: Deploy
    needs: [publish]
    runs-on: ubuntu-latest
    env: 
      TAG: ${{ github.ref }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      CONFIG_PATH: ./configs/deploy_config_111.yml
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Build deploy config
        run: make substitute_config_vars
      - name: Copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./configs/deploy_config_111.yml"
          target: "./app"
      - name: Execute remote command
        uses: appleboy/ssh-action@master
        with:
          script_stop: true
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          envs: TAG
          script: | 
            mkdir -p app
            cd app
            echo "container tag ${TAG:11}" 
            docker pull ${{ secrets.DOCKER_LOGIN }}/${{ secrets.DOCKER_NAME }}:${TAG:11}
            docker stop $(docker ps -a -q --filter name=^/${{ secrets.DOCKER_NAME }}$) || :
            docker run -p ${{ secrets.API_PORT }}:8000 -d --rm -e CONFIG_PATH=/opt/configs/deploy_config_111.yml --mount type=bind,source=$(pwd)/configs,target=/opt/configs --name=${{ secrets.DOCKER_NAME }} ${{ secrets.DOCKER_LOGIN }}/${{ secrets.DOCKER_NAME }}:${TAG:11}
            echo "all ok"

  report:
    environment: stage
    name: Report deploy
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Report deploy
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Service: **${{ secrets.DOCKER_NAME }}**
            Deploy done from ${{ secrets.DOCKER_LOGIN }}/${{ secrets.DOCKER_NAME }}:${TAG:11}
            Service is listening at ${{ secrets.HOST }}:${{ secrets.API_PORT }}