// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/proof"
	"github.com/google/uuid"
)

// ProofCreate is the builder for creating a Proof entity.
type ProofCreate struct {
	config
	mutation *ProofMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *ProofCreate) SetCreateTime(t time.Time) *ProofCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *ProofCreate) SetNillableCreateTime(t *time.Time) *ProofCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *ProofCreate) SetUpdateTime(t time.Time) *ProofCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *ProofCreate) SetNillableUpdateTime(t *time.Time) *ProofCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetContent sets the "content" field.
func (pc *ProofCreate) SetContent(s string) *ProofCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetLink sets the "link" field.
func (pc *ProofCreate) SetLink(s string) *ProofCreate {
	pc.mutation.SetLink(s)
	return pc
}

// SetMeta sets the "meta" field.
func (pc *ProofCreate) SetMeta(m map[string]interface{}) *ProofCreate {
	pc.mutation.SetMeta(m)
	return pc
}

// SetID sets the "id" field.
func (pc *ProofCreate) SetID(u uuid.UUID) *ProofCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProofCreate) SetNillableID(u *uuid.UUID) *ProofCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (pc *ProofCreate) SetChallengeID(id uuid.UUID) *ProofCreate {
	pc.mutation.SetChallengeID(id)
	return pc
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (pc *ProofCreate) SetChallenge(c *Challenge) *ProofCreate {
	return pc.SetChallengeID(c.ID)
}

// Mutation returns the ProofMutation object of the builder.
func (pc *ProofCreate) Mutation() *ProofMutation {
	return pc.mutation
}

// Save creates the Proof in the database.
func (pc *ProofCreate) Save(ctx context.Context) (*Proof, error) {
	var (
		err  error
		node *Proof
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProofMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProofCreate) SaveX(ctx context.Context) *Proof {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProofCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProofCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProofCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := proof.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := proof.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := proof.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProofCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Proof.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Proof.update_time"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Proof.content"`)}
	}
	if v, ok := pc.mutation.Content(); ok {
		if err := proof.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Proof.content": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Proof.link"`)}
	}
	if _, ok := pc.mutation.ChallengeID(); !ok {
		return &ValidationError{Name: "challenge", err: errors.New(`ent: missing required edge "Proof.challenge"`)}
	}
	return nil
}

func (pc *ProofCreate) sqlSave(ctx context.Context) (*Proof, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *ProofCreate) createSpec() (*Proof, *sqlgraph.CreateSpec) {
	var (
		_node = &Proof{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: proof.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proof.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proof.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proof.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proof.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := pc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proof.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := pc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: proof.FieldMeta,
		})
		_node.Meta = value
	}
	if nodes := pc.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proof.ChallengeTable,
			Columns: []string{proof.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.challenge_proofs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProofCreateBulk is the builder for creating many Proof entities in bulk.
type ProofCreateBulk struct {
	config
	builders []*ProofCreate
}

// Save creates the Proof entities in the database.
func (pcb *ProofCreateBulk) Save(ctx context.Context) ([]*Proof, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Proof, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProofMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProofCreateBulk) SaveX(ctx context.Context) []*Proof {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProofCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProofCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
