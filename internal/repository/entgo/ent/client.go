// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/migrate"
	"github.com/google/uuid"

	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/prediction"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Challenge is the client for interacting with the Challenge builders.
	Challenge *ChallengeClient
	// Prediction is the client for interacting with the Prediction builders.
	Prediction *PredictionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Challenge = NewChallengeClient(c.config)
	c.Prediction = NewPredictionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Challenge:  NewChallengeClient(cfg),
		Prediction: NewPredictionClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Challenge:  NewChallengeClient(cfg),
		Prediction: NewPredictionClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Challenge.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Challenge.Use(hooks...)
	c.Prediction.Use(hooks...)
	c.User.Use(hooks...)
}

// ChallengeClient is a client for the Challenge schema.
type ChallengeClient struct {
	config
}

// NewChallengeClient returns a client for the Challenge from the given config.
func NewChallengeClient(c config) *ChallengeClient {
	return &ChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challenge.Hooks(f(g(h())))`.
func (c *ChallengeClient) Use(hooks ...Hook) {
	c.hooks.Challenge = append(c.hooks.Challenge, hooks...)
}

// Create returns a create builder for Challenge.
func (c *ChallengeClient) Create() *ChallengeCreate {
	mutation := newChallengeMutation(c.config, OpCreate)
	return &ChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Challenge entities.
func (c *ChallengeClient) CreateBulk(builders ...*ChallengeCreate) *ChallengeCreateBulk {
	return &ChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Challenge.
func (c *ChallengeClient) Update() *ChallengeUpdate {
	mutation := newChallengeMutation(c.config, OpUpdate)
	return &ChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeClient) UpdateOne(ch *Challenge) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallenge(ch))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeClient) UpdateOneID(id uuid.UUID) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallengeID(id))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Challenge.
func (c *ChallengeClient) Delete() *ChallengeDelete {
	mutation := newChallengeMutation(c.config, OpDelete)
	return &ChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChallengeClient) DeleteOne(ch *Challenge) *ChallengeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChallengeClient) DeleteOneID(id uuid.UUID) *ChallengeDeleteOne {
	builder := c.Delete().Where(challenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeDeleteOne{builder}
}

// Query returns a query builder for Challenge.
func (c *ChallengeClient) Query() *ChallengeQuery {
	return &ChallengeQuery{
		config: c.config,
	}
}

// Get returns a Challenge entity by its id.
func (c *ChallengeClient) Get(ctx context.Context, id uuid.UUID) (*Challenge, error) {
	return c.Query().Where(challenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeClient) GetX(ctx context.Context, id uuid.UUID) *Challenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPredictions queries the predictions edge of a Challenge.
func (c *ChallengeClient) QueryPredictions(ch *Challenge) *PredictionQuery {
	query := &PredictionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(prediction.Table, prediction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challenge.PredictionsTable, challenge.PredictionsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeClient) Hooks() []Hook {
	return c.hooks.Challenge
}

// PredictionClient is a client for the Prediction schema.
type PredictionClient struct {
	config
}

// NewPredictionClient returns a client for the Prediction from the given config.
func NewPredictionClient(c config) *PredictionClient {
	return &PredictionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prediction.Hooks(f(g(h())))`.
func (c *PredictionClient) Use(hooks ...Hook) {
	c.hooks.Prediction = append(c.hooks.Prediction, hooks...)
}

// Create returns a create builder for Prediction.
func (c *PredictionClient) Create() *PredictionCreate {
	mutation := newPredictionMutation(c.config, OpCreate)
	return &PredictionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prediction entities.
func (c *PredictionClient) CreateBulk(builders ...*PredictionCreate) *PredictionCreateBulk {
	return &PredictionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prediction.
func (c *PredictionClient) Update() *PredictionUpdate {
	mutation := newPredictionMutation(c.config, OpUpdate)
	return &PredictionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PredictionClient) UpdateOne(pr *Prediction) *PredictionUpdateOne {
	mutation := newPredictionMutation(c.config, OpUpdateOne, withPrediction(pr))
	return &PredictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PredictionClient) UpdateOneID(id uuid.UUID) *PredictionUpdateOne {
	mutation := newPredictionMutation(c.config, OpUpdateOne, withPredictionID(id))
	return &PredictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prediction.
func (c *PredictionClient) Delete() *PredictionDelete {
	mutation := newPredictionMutation(c.config, OpDelete)
	return &PredictionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PredictionClient) DeleteOne(pr *Prediction) *PredictionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PredictionClient) DeleteOneID(id uuid.UUID) *PredictionDeleteOne {
	builder := c.Delete().Where(prediction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PredictionDeleteOne{builder}
}

// Query returns a query builder for Prediction.
func (c *PredictionClient) Query() *PredictionQuery {
	return &PredictionQuery{
		config: c.config,
	}
}

// Get returns a Prediction entity by its id.
func (c *PredictionClient) Get(ctx context.Context, id uuid.UUID) (*Prediction, error) {
	return c.Query().Where(prediction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PredictionClient) GetX(ctx context.Context, id uuid.UUID) *Prediction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallenge queries the challenge edge of a Prediction.
func (c *PredictionClient) QueryChallenge(pr *Prediction) *ChallengeQuery {
	query := &ChallengeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prediction.Table, prediction.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prediction.ChallengeTable, prediction.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Prediction.
func (c *PredictionClient) QueryUser(pr *Prediction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prediction.Table, prediction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prediction.UserTable, prediction.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PredictionClient) Hooks() []Hook {
	return c.hooks.Prediction
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPredictions queries the predictions edge of a User.
func (c *UserClient) QueryPredictions(u *User) *PredictionQuery {
	query := &PredictionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(prediction.Table, prediction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PredictionsTable, user.PredictionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
