// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/prediction"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/user"
	"github.com/google/uuid"
)

// PredictionUpdate is the builder for updating Prediction entities.
type PredictionUpdate struct {
	config
	hooks    []Hook
	mutation *PredictionMutation
}

// Where appends a list predicates to the PredictionUpdate builder.
func (pu *PredictionUpdate) Where(ps ...predicate.Prediction) *PredictionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PredictionUpdate) SetUpdateTime(t time.Time) *PredictionUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetMeta sets the "meta" field.
func (pu *PredictionUpdate) SetMeta(m map[string]interface{}) *PredictionUpdate {
	pu.mutation.SetMeta(m)
	return pu
}

// ClearMeta clears the value of the "meta" field.
func (pu *PredictionUpdate) ClearMeta() *PredictionUpdate {
	pu.mutation.ClearMeta()
	return pu
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (pu *PredictionUpdate) SetChallengeID(id uuid.UUID) *PredictionUpdate {
	pu.mutation.SetChallengeID(id)
	return pu
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (pu *PredictionUpdate) SetChallenge(c *Challenge) *PredictionUpdate {
	return pu.SetChallengeID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PredictionUpdate) SetUserID(id uuid.UUID) *PredictionUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PredictionUpdate) SetUser(u *User) *PredictionUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PredictionMutation object of the builder.
func (pu *PredictionUpdate) Mutation() *PredictionMutation {
	return pu.mutation
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (pu *PredictionUpdate) ClearChallenge() *PredictionUpdate {
	pu.mutation.ClearChallenge()
	return pu
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PredictionUpdate) ClearUser() *PredictionUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PredictionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PredictionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PredictionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PredictionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PredictionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PredictionUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := prediction.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PredictionUpdate) check() error {
	if _, ok := pu.mutation.ChallengeID(); pu.mutation.ChallengeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Prediction.challenge"`)
	}
	if _, ok := pu.mutation.UserID(); pu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Prediction.user"`)
	}
	return nil
}

func (pu *PredictionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prediction.Table,
			Columns: prediction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prediction.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prediction.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: prediction.FieldMeta,
		})
	}
	if pu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: prediction.FieldMeta,
		})
	}
	if pu.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.ChallengeTable,
			Columns: []string{prediction.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.ChallengeTable,
			Columns: []string{prediction.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.UserTable,
			Columns: []string{prediction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.UserTable,
			Columns: []string{prediction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prediction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PredictionUpdateOne is the builder for updating a single Prediction entity.
type PredictionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PredictionMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PredictionUpdateOne) SetUpdateTime(t time.Time) *PredictionUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetMeta sets the "meta" field.
func (puo *PredictionUpdateOne) SetMeta(m map[string]interface{}) *PredictionUpdateOne {
	puo.mutation.SetMeta(m)
	return puo
}

// ClearMeta clears the value of the "meta" field.
func (puo *PredictionUpdateOne) ClearMeta() *PredictionUpdateOne {
	puo.mutation.ClearMeta()
	return puo
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (puo *PredictionUpdateOne) SetChallengeID(id uuid.UUID) *PredictionUpdateOne {
	puo.mutation.SetChallengeID(id)
	return puo
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (puo *PredictionUpdateOne) SetChallenge(c *Challenge) *PredictionUpdateOne {
	return puo.SetChallengeID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PredictionUpdateOne) SetUserID(id uuid.UUID) *PredictionUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PredictionUpdateOne) SetUser(u *User) *PredictionUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PredictionMutation object of the builder.
func (puo *PredictionUpdateOne) Mutation() *PredictionMutation {
	return puo.mutation
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (puo *PredictionUpdateOne) ClearChallenge() *PredictionUpdateOne {
	puo.mutation.ClearChallenge()
	return puo
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PredictionUpdateOne) ClearUser() *PredictionUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PredictionUpdateOne) Select(field string, fields ...string) *PredictionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prediction entity.
func (puo *PredictionUpdateOne) Save(ctx context.Context) (*Prediction, error) {
	var (
		err  error
		node *Prediction
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PredictionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PredictionUpdateOne) SaveX(ctx context.Context) *Prediction {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PredictionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PredictionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PredictionUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := prediction.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PredictionUpdateOne) check() error {
	if _, ok := puo.mutation.ChallengeID(); puo.mutation.ChallengeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Prediction.challenge"`)
	}
	if _, ok := puo.mutation.UserID(); puo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Prediction.user"`)
	}
	return nil
}

func (puo *PredictionUpdateOne) sqlSave(ctx context.Context) (_node *Prediction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prediction.Table,
			Columns: prediction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prediction.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prediction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prediction.FieldID)
		for _, f := range fields {
			if !prediction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prediction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prediction.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: prediction.FieldMeta,
		})
	}
	if puo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: prediction.FieldMeta,
		})
	}
	if puo.mutation.ChallengeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.ChallengeTable,
			Columns: []string{prediction.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: challenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.ChallengeTable,
			Columns: []string{prediction.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: challenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.UserTable,
			Columns: []string{prediction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prediction.UserTable,
			Columns: []string{prediction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prediction{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prediction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
