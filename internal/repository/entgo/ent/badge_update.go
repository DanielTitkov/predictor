// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/badge"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/user"
	"github.com/google/uuid"
)

// BadgeUpdate is the builder for updating Badge entities.
type BadgeUpdate struct {
	config
	hooks    []Hook
	mutation *BadgeMutation
}

// Where appends a list predicates to the BadgeUpdate builder.
func (bu *BadgeUpdate) Where(ps ...predicate.Badge) *BadgeUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdateTime sets the "update_time" field.
func (bu *BadgeUpdate) SetUpdateTime(t time.Time) *BadgeUpdate {
	bu.mutation.SetUpdateTime(t)
	return bu
}

// SetActive sets the "active" field.
func (bu *BadgeUpdate) SetActive(b bool) *BadgeUpdate {
	bu.mutation.SetActive(b)
	return bu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (bu *BadgeUpdate) SetNillableActive(b *bool) *BadgeUpdate {
	if b != nil {
		bu.SetActive(*b)
	}
	return bu
}

// SetMeta sets the "meta" field.
func (bu *BadgeUpdate) SetMeta(m map[string]interface{}) *BadgeUpdate {
	bu.mutation.SetMeta(m)
	return bu
}

// ClearMeta clears the value of the "meta" field.
func (bu *BadgeUpdate) ClearMeta() *BadgeUpdate {
	bu.mutation.ClearMeta()
	return bu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (bu *BadgeUpdate) AddUserIDs(ids ...uuid.UUID) *BadgeUpdate {
	bu.mutation.AddUserIDs(ids...)
	return bu
}

// AddUsers adds the "users" edges to the User entity.
func (bu *BadgeUpdate) AddUsers(u ...*User) *BadgeUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddUserIDs(ids...)
}

// Mutation returns the BadgeMutation object of the builder.
func (bu *BadgeUpdate) Mutation() *BadgeMutation {
	return bu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (bu *BadgeUpdate) ClearUsers() *BadgeUpdate {
	bu.mutation.ClearUsers()
	return bu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (bu *BadgeUpdate) RemoveUserIDs(ids ...uuid.UUID) *BadgeUpdate {
	bu.mutation.RemoveUserIDs(ids...)
	return bu
}

// RemoveUsers removes "users" edges to User entities.
func (bu *BadgeUpdate) RemoveUsers(u ...*User) *BadgeUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BadgeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BadgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BadgeUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BadgeUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BadgeUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BadgeUpdate) defaults() {
	if _, ok := bu.mutation.UpdateTime(); !ok {
		v := badge.UpdateDefaultUpdateTime()
		bu.mutation.SetUpdateTime(v)
	}
}

func (bu *BadgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   badge.Table,
			Columns: badge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: badge.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: badge.FieldUpdateTime,
		})
	}
	if value, ok := bu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: badge.FieldActive,
		})
	}
	if value, ok := bu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: badge.FieldMeta,
		})
	}
	if bu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: badge.FieldMeta,
		})
	}
	if bu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !bu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{badge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BadgeUpdateOne is the builder for updating a single Badge entity.
type BadgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BadgeMutation
}

// SetUpdateTime sets the "update_time" field.
func (buo *BadgeUpdateOne) SetUpdateTime(t time.Time) *BadgeUpdateOne {
	buo.mutation.SetUpdateTime(t)
	return buo
}

// SetActive sets the "active" field.
func (buo *BadgeUpdateOne) SetActive(b bool) *BadgeUpdateOne {
	buo.mutation.SetActive(b)
	return buo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (buo *BadgeUpdateOne) SetNillableActive(b *bool) *BadgeUpdateOne {
	if b != nil {
		buo.SetActive(*b)
	}
	return buo
}

// SetMeta sets the "meta" field.
func (buo *BadgeUpdateOne) SetMeta(m map[string]interface{}) *BadgeUpdateOne {
	buo.mutation.SetMeta(m)
	return buo
}

// ClearMeta clears the value of the "meta" field.
func (buo *BadgeUpdateOne) ClearMeta() *BadgeUpdateOne {
	buo.mutation.ClearMeta()
	return buo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (buo *BadgeUpdateOne) AddUserIDs(ids ...uuid.UUID) *BadgeUpdateOne {
	buo.mutation.AddUserIDs(ids...)
	return buo
}

// AddUsers adds the "users" edges to the User entity.
func (buo *BadgeUpdateOne) AddUsers(u ...*User) *BadgeUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddUserIDs(ids...)
}

// Mutation returns the BadgeMutation object of the builder.
func (buo *BadgeUpdateOne) Mutation() *BadgeMutation {
	return buo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (buo *BadgeUpdateOne) ClearUsers() *BadgeUpdateOne {
	buo.mutation.ClearUsers()
	return buo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (buo *BadgeUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *BadgeUpdateOne {
	buo.mutation.RemoveUserIDs(ids...)
	return buo
}

// RemoveUsers removes "users" edges to User entities.
func (buo *BadgeUpdateOne) RemoveUsers(u ...*User) *BadgeUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BadgeUpdateOne) Select(field string, fields ...string) *BadgeUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Badge entity.
func (buo *BadgeUpdateOne) Save(ctx context.Context) (*Badge, error) {
	var (
		err  error
		node *Badge
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BadgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BadgeUpdateOne) SaveX(ctx context.Context) *Badge {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BadgeUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BadgeUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BadgeUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdateTime(); !ok {
		v := badge.UpdateDefaultUpdateTime()
		buo.mutation.SetUpdateTime(v)
	}
}

func (buo *BadgeUpdateOne) sqlSave(ctx context.Context) (_node *Badge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   badge.Table,
			Columns: badge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: badge.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Badge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, badge.FieldID)
		for _, f := range fields {
			if !badge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != badge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: badge.FieldUpdateTime,
		})
	}
	if value, ok := buo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: badge.FieldActive,
		})
	}
	if value, ok := buo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: badge.FieldMeta,
		})
	}
	if buo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: badge.FieldMeta,
		})
	}
	if buo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !buo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   badge.UsersTable,
			Columns: badge.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Badge{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{badge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
