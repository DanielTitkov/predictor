// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/user"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/usersession"
	"github.com/google/uuid"
)

// UserSessionUpdate is the builder for updating UserSession entities.
type UserSessionUpdate struct {
	config
	hooks    []Hook
	mutation *UserSessionMutation
}

// Where appends a list predicates to the UserSessionUpdate builder.
func (usu *UserSessionUpdate) Where(ps ...predicate.UserSession) *UserSessionUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdateTime sets the "update_time" field.
func (usu *UserSessionUpdate) SetUpdateTime(t time.Time) *UserSessionUpdate {
	usu.mutation.SetUpdateTime(t)
	return usu
}

// SetIP sets the "ip" field.
func (usu *UserSessionUpdate) SetIP(s string) *UserSessionUpdate {
	usu.mutation.SetIP(s)
	return usu
}

// SetUserAgent sets the "user_agent" field.
func (usu *UserSessionUpdate) SetUserAgent(s string) *UserSessionUpdate {
	usu.mutation.SetUserAgent(s)
	return usu
}

// SetLastActivity sets the "last_activity" field.
func (usu *UserSessionUpdate) SetLastActivity(t time.Time) *UserSessionUpdate {
	usu.mutation.SetLastActivity(t)
	return usu
}

// SetNillableLastActivity sets the "last_activity" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableLastActivity(t *time.Time) *UserSessionUpdate {
	if t != nil {
		usu.SetLastActivity(*t)
	}
	return usu
}

// SetActive sets the "active" field.
func (usu *UserSessionUpdate) SetActive(b bool) *UserSessionUpdate {
	usu.mutation.SetActive(b)
	return usu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableActive(b *bool) *UserSessionUpdate {
	if b != nil {
		usu.SetActive(*b)
	}
	return usu
}

// SetMeta sets the "meta" field.
func (usu *UserSessionUpdate) SetMeta(m map[string]interface{}) *UserSessionUpdate {
	usu.mutation.SetMeta(m)
	return usu
}

// ClearMeta clears the value of the "meta" field.
func (usu *UserSessionUpdate) ClearMeta() *UserSessionUpdate {
	usu.mutation.ClearMeta()
	return usu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usu *UserSessionUpdate) SetUserID(id uuid.UUID) *UserSessionUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserSessionUpdate) SetUser(u *User) *UserSessionUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usu *UserSessionUpdate) Mutation() *UserSessionMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserSessionUpdate) ClearUser() *UserSessionUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSessionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	usu.defaults()
	if len(usu.hooks) == 0 {
		if err = usu.check(); err != nil {
			return 0, err
		}
		affected, err = usu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = usu.check(); err != nil {
				return 0, err
			}
			usu.mutation = mutation
			affected, err = usu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(usu.hooks) - 1; i >= 0; i-- {
			if usu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = usu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSessionUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSessionUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSessionUpdate) defaults() {
	if _, ok := usu.mutation.UpdateTime(); !ok {
		v := usersession.UpdateDefaultUpdateTime()
		usu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSessionUpdate) check() error {
	if _, ok := usu.mutation.UserID(); usu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSession.user"`)
	}
	return nil
}

func (usu *UserSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersession.Table,
			Columns: usersession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersession.FieldID,
			},
		},
	}
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersession.FieldUpdateTime,
		})
	}
	if value, ok := usu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usersession.FieldIP,
		})
	}
	if value, ok := usu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usersession.FieldUserAgent,
		})
	}
	if value, ok := usu.mutation.LastActivity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersession.FieldLastActivity,
		})
	}
	if value, ok := usu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: usersession.FieldActive,
		})
	}
	if value, ok := usu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: usersession.FieldMeta,
		})
	}
	if usu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: usersession.FieldMeta,
		})
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserSessionUpdateOne is the builder for updating a single UserSession entity.
type UserSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSessionMutation
}

// SetUpdateTime sets the "update_time" field.
func (usuo *UserSessionUpdateOne) SetUpdateTime(t time.Time) *UserSessionUpdateOne {
	usuo.mutation.SetUpdateTime(t)
	return usuo
}

// SetIP sets the "ip" field.
func (usuo *UserSessionUpdateOne) SetIP(s string) *UserSessionUpdateOne {
	usuo.mutation.SetIP(s)
	return usuo
}

// SetUserAgent sets the "user_agent" field.
func (usuo *UserSessionUpdateOne) SetUserAgent(s string) *UserSessionUpdateOne {
	usuo.mutation.SetUserAgent(s)
	return usuo
}

// SetLastActivity sets the "last_activity" field.
func (usuo *UserSessionUpdateOne) SetLastActivity(t time.Time) *UserSessionUpdateOne {
	usuo.mutation.SetLastActivity(t)
	return usuo
}

// SetNillableLastActivity sets the "last_activity" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableLastActivity(t *time.Time) *UserSessionUpdateOne {
	if t != nil {
		usuo.SetLastActivity(*t)
	}
	return usuo
}

// SetActive sets the "active" field.
func (usuo *UserSessionUpdateOne) SetActive(b bool) *UserSessionUpdateOne {
	usuo.mutation.SetActive(b)
	return usuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableActive(b *bool) *UserSessionUpdateOne {
	if b != nil {
		usuo.SetActive(*b)
	}
	return usuo
}

// SetMeta sets the "meta" field.
func (usuo *UserSessionUpdateOne) SetMeta(m map[string]interface{}) *UserSessionUpdateOne {
	usuo.mutation.SetMeta(m)
	return usuo
}

// ClearMeta clears the value of the "meta" field.
func (usuo *UserSessionUpdateOne) ClearMeta() *UserSessionUpdateOne {
	usuo.mutation.ClearMeta()
	return usuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usuo *UserSessionUpdateOne) SetUserID(id uuid.UUID) *UserSessionUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserSessionUpdateOne) SetUser(u *User) *UserSessionUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usuo *UserSessionUpdateOne) Mutation() *UserSessionMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserSessionUpdateOne) ClearUser() *UserSessionUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSessionUpdateOne) Select(field string, fields ...string) *UserSessionUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSession entity.
func (usuo *UserSessionUpdateOne) Save(ctx context.Context) (*UserSession, error) {
	var (
		err  error
		node *UserSession
	)
	usuo.defaults()
	if len(usuo.hooks) == 0 {
		if err = usuo.check(); err != nil {
			return nil, err
		}
		node, err = usuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = usuo.check(); err != nil {
				return nil, err
			}
			usuo.mutation = mutation
			node, err = usuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(usuo.hooks) - 1; i >= 0; i-- {
			if usuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = usuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSessionUpdateOne) SaveX(ctx context.Context) *UserSession {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSessionUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSessionUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdateTime(); !ok {
		v := usersession.UpdateDefaultUpdateTime()
		usuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSessionUpdateOne) check() error {
	if _, ok := usuo.mutation.UserID(); usuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSession.user"`)
	}
	return nil
}

func (usuo *UserSessionUpdateOne) sqlSave(ctx context.Context) (_node *UserSession, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersession.Table,
			Columns: usersession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersession.FieldID,
			},
		},
	}
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersession.FieldID)
		for _, f := range fields {
			if !usersession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersession.FieldUpdateTime,
		})
	}
	if value, ok := usuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usersession.FieldIP,
		})
	}
	if value, ok := usuo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usersession.FieldUserAgent,
		})
	}
	if value, ok := usuo.mutation.LastActivity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersession.FieldLastActivity,
		})
	}
	if value, ok := usuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: usersession.FieldActive,
		})
	}
	if value, ok := usuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: usersession.FieldMeta,
		})
	}
	if usuo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: usersession.FieldMeta,
		})
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSession{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
