// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/predictor/internal/repository/entgo/ent/user"
	"github.com/google/uuid"
)

// Challenge is the model entity for the Challenge schema.
type Challenge struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Outcome holds the value of the "outcome" field.
	Outcome *bool `json:"outcome,omitempty"`
	// Published holds the value of the "published" field.
	Published bool `json:"published,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Type holds the value of the "type" field.
	Type challenge.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChallengeQuery when eager-loading is set.
	Edges           ChallengeEdges `json:"edges"`
	user_challenges *uuid.UUID
}

// ChallengeEdges holds the relations/edges for other nodes in the graph.
type ChallengeEdges struct {
	// Predictions holds the value of the predictions edge.
	Predictions []*Prediction `json:"predictions,omitempty"`
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PredictionsOrErr returns the Predictions value or an error if the edge
// was not loaded in eager-loading.
func (e ChallengeEdges) PredictionsOrErr() ([]*Prediction, error) {
	if e.loadedTypes[0] {
		return e.Predictions, nil
	}
	return nil, &NotLoadedError{edge: "predictions"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChallengeEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Challenge) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case challenge.FieldOutcome, challenge.FieldPublished:
			values[i] = new(sql.NullBool)
		case challenge.FieldContent, challenge.FieldDescription, challenge.FieldType:
			values[i] = new(sql.NullString)
		case challenge.FieldCreateTime, challenge.FieldUpdateTime, challenge.FieldStartTime, challenge.FieldEndTime:
			values[i] = new(sql.NullTime)
		case challenge.FieldID:
			values[i] = new(uuid.UUID)
		case challenge.ForeignKeys[0]: // user_challenges
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Challenge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Challenge fields.
func (c *Challenge) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case challenge.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case challenge.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case challenge.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case challenge.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case challenge.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case challenge.FieldOutcome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field outcome", values[i])
			} else if value.Valid {
				c.Outcome = new(bool)
				*c.Outcome = value.Bool
			}
		case challenge.FieldPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field published", values[i])
			} else if value.Valid {
				c.Published = value.Bool
			}
		case challenge.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				c.StartTime = value.Time
			}
		case challenge.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				c.EndTime = value.Time
			}
		case challenge.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = challenge.Type(value.String)
			}
		case challenge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_challenges", values[i])
			} else if value.Valid {
				c.user_challenges = new(uuid.UUID)
				*c.user_challenges = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPredictions queries the "predictions" edge of the Challenge entity.
func (c *Challenge) QueryPredictions() *PredictionQuery {
	return (&ChallengeClient{config: c.config}).QueryPredictions(c)
}

// QueryAuthor queries the "author" edge of the Challenge entity.
func (c *Challenge) QueryAuthor() *UserQuery {
	return (&ChallengeClient{config: c.config}).QueryAuthor(c)
}

// Update returns a builder for updating this Challenge.
// Note that you need to call Challenge.Unwrap() before calling this method if this Challenge
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Challenge) Update() *ChallengeUpdateOne {
	return (&ChallengeClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Challenge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Challenge) Unwrap() *Challenge {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Challenge is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Challenge) String() string {
	var builder strings.Builder
	builder.WriteString("Challenge(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", content=")
	builder.WriteString(c.Content)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	if v := c.Outcome; v != nil {
		builder.WriteString(", outcome=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", published=")
	builder.WriteString(fmt.Sprintf("%v", c.Published))
	builder.WriteString(", start_time=")
	builder.WriteString(c.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(c.EndTime.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Challenges is a parsable slice of Challenge.
type Challenges []*Challenge

func (c Challenges) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
